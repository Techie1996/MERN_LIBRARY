{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reyan\\\\OneDrive\\\\Desktop\\\\ONline Library\\\\mern-library-app\\\\frontend\\\\src\\\\components\\\\MyBooks.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { VStack, Heading, Input, Button, SimpleGrid, Text, useColorModeValue, useToast } from '@chakra-ui/react';\nimport BookCard from './BookCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyBooks = ({\n  isAdmin\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [books, setBooks] = useState([]);\n  const toast = useToast();\n\n  // Your dummy data\n  const dummyData = useMemo(() => [/*... your dummy data ...*/], []);\n\n  // Fetch books based on the search term\n  const fetchBooks = query => {\n    const filteredBooks = dummyData.filter(book => book.volumeInfo.title.toLowerCase().includes(query.toLowerCase()));\n    if (query === '') {\n      setBooks(dummyData);\n    } else if (filteredBooks.length > 0) {\n      setBooks(filteredBooks);\n    } else {\n      setBooks([]);\n      showToast('No matching books found.');\n    }\n  };\n  useEffect(() => {\n    setBooks(dummyData);\n  }, [dummyData]);\n  const handleSearch = () => {\n    fetchBooks(searchTerm);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n  const handleAvailabilityChange = (bookId, newAvailability) => {\n    const updatedBooks = books.map(book => book.id === bookId ? {\n      ...book,\n      availabilityStatus: newAvailability\n    } : book);\n    setBooks(updatedBooks);\n  };\n  const handleTransaction = async (bookId, transactionType) => {\n    try {\n      // Make an API request to your backend to update the transaction\n      // Example: Replace '/api/transactions' with your actual API endpoint\n      const response = await fetch(`/api/transactions/${bookId}`, {\n        method: 'POST',\n        // or 'PUT' depending on your API design\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          transactionType\n        })\n      });\n      if (response.ok) {\n        // Successfully updated the transaction\n        console.log(`Transaction: ${transactionType} for Book ID ${bookId} successful.`);\n        // Optionally, you can update the UI to reflect the transaction\n        handleAvailabilityChange(bookId, transactionType === 'Borrow' ? 'Not Available' : 'Available');\n      } else {\n        // Handle error responses from the API\n        console.error(`Transaction failed for Book ID ${bookId}.`);\n      }\n    } catch (error) {\n      // Handle network or other errors\n      console.error(`Error during transaction for Book ID ${bookId}:`, error);\n    }\n  };\n  const showToast = message => {\n    toast({\n      title: message,\n      status: 'info',\n      duration: 5000,\n      isClosable: true\n    });\n  };\n  const textColor = useColorModeValue('black', 'white');\n  return /*#__PURE__*/_jsxDEV(VStack, {\n    spacing: \"5\",\n    color: textColor,\n    width: \"100%\",\n    maxW: \"800px\",\n    marginX: \"auto\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"xl\",\n      children: \"Library\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"Search for books...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value),\n      onKeyDown: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      colorScheme: \"blue\",\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), books.length > 0 ? /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: {\n        base: 1,\n        sm: 2,\n        md: 3\n      },\n      spacing: 5,\n      children: books.map(book => /*#__PURE__*/_jsxDEV(BookCard, {\n        book: book,\n        onAvailabilityChange: handleAvailabilityChange,\n        onTransaction: handleTransaction\n      }, book.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Text, {\n      children: \"No books found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(MyBooks, \"zEllu3k4VLfbK4kG5OnSN9kcu84=\", false, function () {\n  return [useToast, useColorModeValue];\n});\n_c = MyBooks;\nexport default MyBooks;\nvar _c;\n$RefreshReg$(_c, \"MyBooks\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","VStack","Heading","Input","Button","SimpleGrid","Text","useColorModeValue","useToast","BookCard","jsxDEV","_jsxDEV","MyBooks","isAdmin","_s","searchTerm","setSearchTerm","books","setBooks","toast","dummyData","fetchBooks","query","filteredBooks","filter","book","volumeInfo","title","toLowerCase","includes","length","showToast","handleSearch","handleKeyPress","e","key","handleAvailabilityChange","bookId","newAvailability","updatedBooks","map","id","availabilityStatus","handleTransaction","transactionType","response","fetch","method","headers","body","JSON","stringify","ok","console","log","error","message","status","duration","isClosable","textColor","spacing","color","width","maxW","marginX","children","as","size","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","target","onKeyDown","colorScheme","onClick","columns","base","sm","md","onAvailabilityChange","onTransaction","_c","$RefreshReg$"],"sources":["C:/Users/Reyan/OneDrive/Desktop/ONline Library/mern-library-app/frontend/src/components/MyBooks.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  VStack,\r\n  Heading,\r\n  Input,\r\n  Button,\r\n  SimpleGrid,\r\n  Text,\r\n  useColorModeValue,\r\n  useToast,\r\n} from '@chakra-ui/react';\r\nimport BookCard from './BookCard';\r\n\r\nconst MyBooks = ({ isAdmin }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [books, setBooks] = useState([]);\r\n  const toast = useToast();\r\n\r\n  // Your dummy data\r\n  const dummyData = useMemo(() => [/*... your dummy data ...*/], []);\r\n\r\n  // Fetch books based on the search term\r\n  const fetchBooks = (query) => {\r\n    const filteredBooks = dummyData.filter((book) =>\r\n      book.volumeInfo.title.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n\r\n    if (query === '') {\r\n      setBooks(dummyData);\r\n    } else if (filteredBooks.length > 0) {\r\n      setBooks(filteredBooks);\r\n    } else {\r\n      setBooks([]);\r\n      showToast('No matching books found.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setBooks(dummyData);\r\n  }, [dummyData]);\r\n\r\n  const handleSearch = () => {\r\n    fetchBooks(searchTerm);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  };\r\n\r\n  const handleAvailabilityChange = (bookId, newAvailability) => {\r\n    const updatedBooks = books.map((book) =>\r\n      book.id === bookId ? { ...book, availabilityStatus: newAvailability } : book\r\n    );\r\n    setBooks(updatedBooks);\r\n  };\r\n\r\n  const handleTransaction = async (bookId, transactionType) => {\r\n    try {\r\n      // Make an API request to your backend to update the transaction\r\n      // Example: Replace '/api/transactions' with your actual API endpoint\r\n      const response = await fetch(`/api/transactions/${bookId}`, {\r\n        method: 'POST', // or 'PUT' depending on your API design\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ transactionType }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Successfully updated the transaction\r\n        console.log(`Transaction: ${transactionType} for Book ID ${bookId} successful.`);\r\n        // Optionally, you can update the UI to reflect the transaction\r\n        handleAvailabilityChange(bookId, transactionType === 'Borrow' ? 'Not Available' : 'Available');\r\n      } else {\r\n        // Handle error responses from the API\r\n        console.error(`Transaction failed for Book ID ${bookId}.`);\r\n      }\r\n    } catch (error) {\r\n      // Handle network or other errors\r\n      console.error(`Error during transaction for Book ID ${bookId}:`, error);\r\n    }\r\n  };\r\n\r\n  const showToast = (message) => {\r\n    toast({\r\n      title: message,\r\n      status: 'info',\r\n      duration: 5000,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  const textColor = useColorModeValue('black', 'white');\r\n\r\n  return (\r\n    <VStack spacing=\"5\" color={textColor} width=\"100%\" maxW=\"800px\" marginX=\"auto\">\r\n      <Heading as=\"h1\" size=\"xl\">\r\n        Library\r\n      </Heading>\r\n      <Input\r\n        placeholder=\"Search for books...\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        onKeyDown={handleKeyPress}\r\n      />\r\n      <Button colorScheme=\"blue\" onClick={handleSearch}>\r\n        Search\r\n      </Button>\r\n      {books.length > 0 ? (\r\n        <SimpleGrid columns={{ base: 1, sm: 2, md: 3 }} spacing={5}>\r\n          {books.map((book) => (\r\n            <BookCard\r\n              key={book.id}\r\n              book={book}\r\n              onAvailabilityChange={handleAvailabilityChange}\r\n              onTransaction={handleTransaction}\r\n            />\r\n          ))}\r\n        </SimpleGrid>\r\n      ) : (\r\n        <Text>No books found</Text>\r\n      )}\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default MyBooks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}